package com.example.bean;

import org.greenrobot.greendao.annotation.*;

import com.example.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.example.dao.InformationDao;
import com.example.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "INFORMATION".
 */
@Entity(active = true)
public class Information implements java.io.Serializable {

    @Id(autoincrement = true)
    private Long infoId;

    @NotNull
    private String address;

    @NotNull
    private String icon_url;
    private int score;
    private Long user_id;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 513011269)
    private transient InformationDao myDao;

    @ToOne(joinProperty = "user_id")
    private User user;

    @Generated(hash = 251390918)
    private transient Long user__resolvedKey;

    @Generated(hash = 1933283371)
    public Information() {
    }

    public Information(Long infoId) {
        this.infoId = infoId;
    }

    @Generated(hash = 1105087733)
    public Information(Long infoId, @NotNull String address, @NotNull String icon_url, int score,
            Long user_id) {
        this.infoId = infoId;
        this.address = address;
        this.icon_url = icon_url;
        this.score = score;
        this.user_id = user_id;
    }

    public Long getInfoId() {
        return infoId;
    }

    public void setInfoId(Long infoId) {
        this.infoId = infoId;
    }

    @NotNull
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(@NotNull String address) {
        this.address = address;
    }

    @NotNull
    public String getIcon_url() {
        return icon_url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIcon_url(@NotNull String icon_url) {
        this.icon_url = icon_url;
    }

    public int getScore() {
        return score;
    }

    public void setScore(int score) {
        this.score = score;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 2126679178)
    public User getUser() {
        Long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 2002682997)
    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user_id = user == null ? null : user.getUserId();
            user__resolvedKey = user_id;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 176782343)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInformationDao() : null;
    }

}

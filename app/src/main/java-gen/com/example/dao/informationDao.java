package com.example.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bean.User;

import com.example.bean.Information;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFORMATION".
*/
public class InformationDao extends AbstractDao<Information, Long> {

    public static final String TABLENAME = "INFORMATION";

    /**
     * Properties of entity Information.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property InfoId = new Property(0, Long.class, "infoId", true, "INFO_ID");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Icon_url = new Property(2, String.class, "icon_url", false, "ICON_URL");
        public final static Property Score = new Property(3, int.class, "score", false, "SCORE");
        public final static Property User_id = new Property(4, Long.class, "user_id", false, "USER_ID");
    }

    private DaoSession daoSession;


    public InformationDao(DaoConfig config) {
        super(config);
    }
    
    public InformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFORMATION\" (" + //
                "\"INFO_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: infoId
                "\"ADDRESS\" TEXT NOT NULL ," + // 1: address
                "\"ICON_URL\" TEXT NOT NULL ," + // 2: icon_url
                "\"SCORE\" INTEGER NOT NULL ," + // 3: score
                "\"USER_ID\" INTEGER);"); // 4: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Information entity) {
        stmt.clearBindings();
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(1, infoId);
        }
        stmt.bindString(2, entity.getAddress());
        stmt.bindString(3, entity.getIcon_url());
        stmt.bindLong(4, entity.getScore());
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(5, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Information entity) {
        stmt.clearBindings();
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(1, infoId);
        }
        stmt.bindString(2, entity.getAddress());
        stmt.bindString(3, entity.getIcon_url());
        stmt.bindLong(4, entity.getScore());
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(5, user_id);
        }
    }

    @Override
    protected final void attachEntity(Information entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Information readEntity(Cursor cursor, int offset) {
        Information entity = new Information( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // infoId
            cursor.getString(offset + 1), // address
            cursor.getString(offset + 2), // icon_url
            cursor.getInt(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Information entity, int offset) {
        entity.setInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.getString(offset + 1));
        entity.setIcon_url(cursor.getString(offset + 2));
        entity.setScore(cursor.getInt(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Information entity, long rowId) {
        entity.setInfoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Information entity) {
        if(entity != null) {
            return entity.getInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Information entity) {
        return entity.getInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM INFORMATION T");
            builder.append(" LEFT JOIN user T0 ON T.\"USER_ID\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Information loadCurrentDeep(Cursor cursor, boolean lock) {
        Information entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Information loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Information> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Information> list = new ArrayList<Information>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Information> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Information> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
